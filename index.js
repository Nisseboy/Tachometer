const inertia = 1;

let pages = [document.getElementById("setup"), document.getElementById("tacho")]
let pagesButtons = document.getElementById("pages-buttons");
let gearSelector = document.getElementById("gear-selector");
let rpmGauge = document.getElementById("rpm");


let curveCanvas = document.getElementById("curve-canvas");
curveCanvas.width = 1920;
curveCanvas.height = 1080;
let curveCtx = curveCanvas.getContext("2d");

let gearTemplates = document.getElementById("gear-templates");


let gearsTemplates = {
  "AM6": "3.55*(52/15)\n3, 2.062, 1.525, 1.227, 1.042, 0.96",
};
for (let i in gearsTemplates) {
  let elem = document.createElement("button");
  elem.innerText = i;
  elem.onclick = () => {
    document.getElementById("gears").value = gearsTemplates[i];
    settings.gears = gearsTemplates[i];
    updateValues();
    saveSettings();
  }
  gearTemplates.appendChild(elem);
}


let settings = JSON.parse(localStorage.getItem("tachometer-settings") || "{}");
function saveSettings() {
  localStorage.setItem("tachometer-settings", JSON.stringify(settings));
}

function assignInput(settingName, defaultValue, id, onchange = () => {}) {
  settings[settingName] = settings[settingName] || defaultValue;

  if (!id) return;
  let input = document.getElementById(id);
  
  if (input.type != "checkbox") input.value = settings[settingName];
  else input.checked = settings[settingName];
  input.addEventListener("change", (v) => {
    let val;
    if (v.target.type == "checkbox") val = v.target.checked;
    if (v.target.type == "textarea") val = v.target.value;
    else val = parseFloat(v.target.value);

     settings[settingName] = val;
    onchange(settings[settingName]);
    saveSettings();
  });
}

assignInput("gears", gearsTemplates["AM6"], "gears", updateValues);
assignInput("wheelR", 0.6, "wheelR-input");
assignInput("pulses", 5, "pulse-input");

let finalDrive;
let gears;
let gear = 1;
function changeGear(delta) {
  gear += delta;
  gear = Math.max(Math.min(gear, gears.length), 1);
  gearSelector.children[1].innerText = gear;
}


let page = pages[0];
function setPage(i) {
  page.classList.remove("shown");
  page = pages[i];
  page.classList.add("shown");
}
for (let i in pages) {
  let p = pages[i];
  let elem = document.createElement("button");
  elem.innerText = p.id;
  elem.onclick = () => {setPage(i)};
  pagesButtons.appendChild(elem);
}


updateValues();
function updateValues() {
  let s = settings.gears.split("\n");
  finalDrive = eval(s[0]);
  gears = s[1].split(",").map(e=>eval(e));
}

function strokeEllipse(ctx, pos, size) {
  ctx.beginPath();    
  ctx.ellipse(pos.x, pos.y, size, size, 0, 0, Math.PI * 2);
  ctx.stroke();
}
function fillEllipse(ctx, pos, size) {
  ctx.beginPath();    
  ctx.ellipse(pos.x, pos.y, size, size, 0, 0, Math.PI * 2);
  ctx.fill();
}
function strokeRect(ctx, pos, size) {
  ctx.beginPath();    
  ctx.rect(pos.x, pos.y, size.x, size.y);
  ctx.stroke();
}

function renderGraph(ctx, data, lines, hor, ver) {
  if (data.length == 0) return;

  let hasX = data[0][0] instanceof Vec;

  let offset = new Vec(200, 100);
  let size = new Vec(ctx.canvas.width, ctx.canvas.height).subV(offset);

  let max = new Vec(0, 0);
  for (let j = 0; j < data.length; j++) {
    for (let i = 0; i < data[j].length; i++) {
      let p = data[j][i];
      if (p == undefined) continue;
      let pt = hasX ? p : new Vec(i, p);

      if (pt.x > max.x) max.x = pt.x;
      if (pt.y > max.y) max.y = pt.y;
    }
  }

  let scale = size._divV(max);

  ctx.strokeStyle = "rgb(0, 0, 0)";
  ctx.fillStyle = "rgb(255, 255, 255)";
  ctx.beginPath();    
  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.stroke();
  ctx.fill();

  ctx.fillStyle = "rgb(200, 200, 200)";
  ctx.beginPath();    
  ctx.rect(offset.x, 0, ctx.canvas.width, ctx.canvas.height - offset.y);
  ctx.fill();

  ctx.fillStyle = "rgb(0, 0, 0)";
  ctx.font = "30px monospace";

  ctx.textAlign = "left";
  ctx.textBaseline = "bottom";
  
  ctx.strokeStyle = "rgb(100, 100, 100)";
  let steps = 10;
  for (let i = 0; i < steps; i++) {
    let y = size.y / steps * (steps - i);
    ctx.fillText(Math.round(max.y / steps * i * 100) / 100, 0, y);

    ctx.beginPath();
    ctx.moveTo(0, y);
    ctx.lineTo(ctx.canvas.width, y);
    ctx.stroke();
  }
  ctx.save();
  ctx.translate(offset.x, ctx.canvas.height / 2);
  ctx.rotate(Math.PI / 2);
  ctx.textBaseline = "top";
  ctx.textAlign = "center";
  ctx.fillText(ver.name, 0, 0);
  ctx.restore();
  


  for (let i = 0; i < steps; i++) {
    let x = offset.x + size.x / steps * i;
    ctx.fillText(Math.round(max.x / steps * i), x, ctx.canvas.height);

    ctx.beginPath();
    ctx.moveTo(x, 0);
    ctx.lineTo(x, ctx.canvas.height);
    ctx.stroke();
  }
  ctx.save();
  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height - offset.y);
  ctx.textBaseline = "top";
  ctx.textAlign = "center";
  ctx.fillText(hor.name, 0, 0);
  ctx.restore();

  ctx.textBaseline = "top";
  
  for (let j = 0; j < data.length; j++) {
    let line = lines[j];
    if (line) {
      ctx.strokeStyle = `rgb(${line.c.x}, ${line.c.y}, ${line.c.z})`;
      ctx.fillStyle = `rgb(${line.c.x}, ${line.c.y}, ${line.c.z})`;

      if (line.name) ctx.fillText(line.name, offset.x, j * 35);
    } else {
      ctx.strokeStyle = "rgb(0, 0, 0)";
    }

    ctx.beginPath();   
    for (let i = 0; i < data[j].length; i++) {
      let p = data[j][i];
      if (p == undefined) continue;
      let pt = hasX ? p : new Vec(i, p);

      ctx.lineTo(pt.x * scale.x + offset.x, size.y - (pt.y * scale.y));
    }
    ctx.stroke();
  }
}


let dyno = false;
let lines = [];
let lineTorque = undefined;
let linePower = undefined;
let linesInfo = [];
let highestrpm = 0;
document.getElementById("dyno-button").onchange = e => {
  growing = true;


  dyno = e.target.checked;

  if (dyno) {
    lines = [[], []];
    lineTorque = lines[0];
    linePower = lines[1];
    linesInfo = [{c: new Vec(255, 255, 0), name: "Torque (nm)"}, {c: new Vec(255, 0, 0), name: "Power (hp)"}];
    highestrpm = 0;
  }
};

let rpm = undefined;
let lastrpm = undefined;
let dts = [];

function addDt(dt) {
  let fullRot = dt * settings.pulses;

  lastrpm = rpm;
  rpm = 1 / fullRot * 60 * finalDrive * gears[gear - 1];
  if (dt >= 1) rpm = 0;
  rpmGauge.innerText = Math.round(rpm);

  if (dyno) {
    if (lastrpm == 0 && rpm != 0) {
      lineTorque = [];
      linePower = [];
      lines.push(lineTorque, linePower);
      linesInfo.push({c: new Vec(255, 255, 0)}, {c: new Vec(255, 0, 0)});
      highestrpm = 0;
    } 

    let diff = rpm - lastrpm;
    let deltaAV = diff * 0.10472;
    let AA = deltaAV / dt;
    let torque = AA * inertia;
    let power = torque * rpm / 7127;

    if (rpm > highestrpm && power > 0) {
      lineTorque.push(new Vec(rpm, torque));
      linePower.push(new Vec(rpm, power));
    }

    highestrpm = Math.max(rpm, highestrpm);

    renderGraph(curveCtx, lines, linesInfo, {name: "rpm"}, {name: "power/torque"});
  }
  

}


let lastPulse = 0;
let growing = false;
let currentDt = 200000;
if (false) {
  setInterval(() => {
    addDt(currentDt / 1000000);
    if (growing) currentDt *= 0.995;
    if (currentDt < 50000) currentDt = 2000000;
  }, 16);
} else {
  let serialData = "";
  
  ser.on = (data) => {
    serialData += data;

    let s = serialData.split(",");
    for (let i = 0; i < s.length - 1; i++) {
      addDt(parseFloat(s[i]) / 1000000);
    }
    serialData = s[s.length - 1];

    lastPulse = performance.now();
  }

  setInterval(() => {
    if (performance.now() - lastPulse > 200) {
      addDt(1);
    }
  }, 16);
}




function onseeked() {
  let frame = Math.round(video.currentTime * settings.fps);
  frameCounter.innerText = frame + "/" + totalFrames + ", loss: " + Math.floor(lost / frame * 100) + "%";

  datactx.drawImage(video, 0, 0, dataCanvas.width, dataCanvas.height);
  
  let data = datactx.getImageData(pos.x, pos.y, size.x, size.y).data;
  let avgPos = new Vec(0, 0);
  let avgNum = 0;

  let predictedAngle;
  if (frame > 5) {
    let lastDeltaAngle = deltaAngles[frame - 1];
    let lastAngle = angles[frame - 1];
    if (lastDeltaAngle) predictedAngle = lastAngle + lastDeltaAngle;
  }
  
  
  
  
  redrawDisplay();
  
  let p = new Vec(0, 0);
  for (p.x = 0; p.x < size.x; p.x++) {
    for (p.y = 0; p.y < size.y; p.y++) {
      let sqdist = (p.x - size.x / 2) ** 2 + (p.y - size.y / 2) ** 2;
      if (sqdist < settings.inner ** 2 || sqdist > settings.outer ** 2) continue;

      let k = (p.x + p.y * size.x) * 4;
      if (!colorMatched(data[k],data[k+1],data[k+2])) continue;

      let a = Math.atan2(p.y - size.y / 2, p.x - size.x / 2);

      if (Math.abs(getDeltaAngle(a, predictedAngle)) > Math.PI / 2) {
        if (settings.display) {
          displayctx.fillStyle = "rgb(255, 0, 255)";
          fillEllipse(displayctx, p._addV(pos), 1);
        }
        continue;
      }

      if (settings.display) {
        displayctx.fillStyle = "rgb(0, 0, 255)";
        fillEllipse(displayctx, p._addV(pos), 1);
      }
      avgPos.x += p.x;
      avgPos.y += p.y;
      avgNum++;
    }
  }

  let angle = undefined;

  misses[frame] = 0;
  if (avgNum == 0) {
    lost++;
    misses[frame] = 0.4;
  } else {
    avgPos.div(avgNum);
    avgPos.addV(pos);

    let diff = avgPos._subV(settings.center);
    let a = Math.atan2(diff.y, diff.x);
    
    if (Math.abs(getDeltaAngle(a, settings.deadangle)) < settings.deadsize) {
      lost++;
      misses[frame] = 0.1;
      console.log(123);
      
    } else {

      if (angles.length > 0 && a == angles[angles.length - 1]) {
        lost++;
        misses[frame] = 0.2;
      } else {
        if (diff.sqMag() < settings.inner ** 2 || avgNum < 2) {
          lost++;
          misses[frame] = 0.3;
        } else {
          angle = a;
        }
      }
    }

    if (settings.display) {
      if (angle) displayctx.fillStyle = "rgb(0, 255, 0)";
      else displayctx.fillStyle = "rgb(255, 0, 0)";
      fillEllipse(displayctx, avgPos, 6);
    }
  }

  if (angle == undefined) angle = predictedAngle;

  if (analyzing) {
    angles[frame] = angle;
    calculateDeltaAngle(frame);
    
    renderDeltaAngles();


    nextFrame = frame + 1;

    let num = totalFrames - 1;
    if (nextFrame >= num) {
      nextFrame = undefined;
      video.controls = true;
      analyzing = false;

      finishAnalyze();
    }
  }

  if (nextFrame != undefined) {
    let t = nextFrame / settings.fps;
    video.currentTime = t;
  }
}


function calculateDeltaAngle(frame) {
  let angle = angles[frame];

  let lastAngle = 0;
  let lastDelta = 0;
  if (frame > 0) {
    lastAngle = angles[frame - 1];
    lastDelta = deltaAngles[frame - 1];
  }

  if (angle == null || angle == undefined) {
    angle = lastAngle + lastDelta;
    angles[frame] = angle;
  }

  
  let predictedAngle = lastAngle + lastDelta;
  let diff = getDeltaAngle(angle, predictedAngle);
  if (Math.abs(diff) > Math.PI / 2) {
    diff = 0;
  }
  let delta = lastDelta - diff;
  deltaAngles[frame] = delta;
  
}

function finishAnalyze() {
  for (let i = 0; i < angles.length; i++) {
    calculateDeltaAngle(i);
  }

  let sign = 0;
  for (let d of deltaAngles) if (d) sign += Math.sign(d);
  sign = Math.sign(sign);
  deltaAngles = deltaAngles.map(e=>e*sign);

  deltaAngles = denoiseArray(deltaAngles, 15);

  let b = true;
  if (b) {
    renderDeltaAngles();
  }
  else
    calculatePower();
}

function renderGraph2() {
  renderGraph(ctx, [deltaAngles], [{c:new Vec(0, 0, 0)}], {name: "rpm"}, {name: "angle"});
}


/*
function analyzeVideo() {
  
  function extractFrame(frame) {
    return new Promise((resolve) => {
      video.currentTime = frame / settings.fps;
      video.onseeked = () => {
        redrawDisplay();
        datactx.drawImage(video, 0, 0, dataCanvas.width, dataCanvas.height);

        let data = datactx.getImageData(pos.x, pos.y, size.x, size.y).data;
        let avgPos = new Vec(0, 0);
        let avgNum = 0;
        
        let p = new Vec(0, 0);
        for (p.x = 0; p.x < size.x; p.x++) {
          for (p.y = 0; p.y < size.y; p.y++) {
            let sqdist = (p.x - size.x / 2) ** 2 + (p.y - size.y / 2) ** 2;
            if (sqdist < settings.inner ** 2 || sqdist > settings.outer ** 2) continue;

            let k = (p.x + p.y * size.x) * 4;
            let colorSqDist = (data[k] - settings.targetColor.x) ** 2 + (data[k+1] - settings.targetColor.y) ** 2 + (data[k+2] - settings.targetColor.z) ** 2;
            if (colorSqDist > settings.tolerance ** 2) continue;

            displayctx.fillStyle = "rgb(0, 0, 255)";
            fillEllipse(displayctx, p._addV(pos), 1);
            avgPos.x += p.x;
            avgPos.y += p.y;
            avgNum++;
          }
        }

        if (avgNum == 0) {
          angles.push(undefined);
          lost++;
        } else {
          avgPos.div(avgNum);
          avgPos.addV(pos);

          let diff = avgPos._subV(settings.center);
          
          if (diff.sqMag() < settings.inner ** 2 || avgNum < 2) {
            angles.push(undefined);
            lost++;
            displayctx.fillStyle = "rgb(255, 0, 0)";
          } else {
            let angle = Math.atan2(diff.y, diff.x);

            if (angle == angles[angles.length - 1]) {
              angles.push(undefined);
              lost++;
            } else {
              angles.push(angle);
            }
            
            displayctx.fillStyle = "rgb(0, 255, 0)";
          }
          fillEllipse(displayctx, avgPos, 6);
        }


        video.onseeked = undefined;
        resolve();
      };
    });
  }

  
  (async () => {

    let totalFrames = Math.floor(video.duration * settings.fps);
    angles = [];
    deltaAngles = [];
    

    video.controls = false;
    redrawDisplay();
    let a = false;
    if (a) {
      for (let frame = 0; frame < totalFrames; frame++) {      
        await extractFrame(frame);
        analyzeLoss.innerText = "Progress: " + Math.round(frame / totalFrames * 100) + "%, Loss: " + Math.round(lost / frame * 100) + "%"
      }
    }
    else angles = JSON.parse('[2.5387885236567693,null,2.5008213151888956,2.4725346770516414,2.3962679541159857,2.2732391624267976,2.1555765381202305,2.046080022070071,1.9818729973786913,1.9177498220263447,1.833052715630623,1.7300120401231982,1.642975513405737,1.5954080184177537,1.4979442858619876,1.444525514466643,1.2997430903638962,1.2031359405507425,1.067373578151094,0.9663080911077203,0.8751257553919443,0.7664399193034508,0.6626590266742756,0.5672283824318803,0.4743701577334147,0.38104376685094526,0.28862059863477546,0.19448363490148046,0.10363758833479146,0.011463563511088877,-0.07889130612728878,-0.12014011828630916,null,null,-0.43481463763669076,-0.6085155296811371,-0.7355386326942284,-0.8638360270997071,-0.994224607772919,-1.1243382476606678,-1.2615031349618206,-1.4086429736018609,-1.561474575995522,-1.7616824322220457,-1.9123307647988865,-2.0211879233962247,-2.14576485737115,null,null,null,-0.29817129824482697,null,2.893952485008636,null,2.5389739022526028,2.4543323763563962,2.2668708220119176,2.0660766215897546,1.903746471552343,1.707477558729446,1.5151126566440878,1.346690034529058,1.134707748160081,0.9461114316701986,0.753266870396633,0.5631517616332098,0.3808522546282271,0.19349902659347815,-0.005413850627230135,-0.13460400942952203,null,-0.6092217191924124,-0.826940908130657,-1.0338157792451192,-1.2385941915571466,-1.446919394018579,-1.6878130900605817,-1.903073225317658,-2.0285299832085295,-2.1069433845824665,null,null,null,null,2.9096237471849293,null,2.500224756329558,2.3469636930233615,2.1245179068186486,1.9400810729535678,1.7227497570944672,1.508151653298978,1.2954119533500692,1.0826786375862598,0.8741873788412637,0.6595124730352692,0.457792075818057,0.23774460109415152,0.01667899100165249,-0.1354890389865642,null,-0.6495602304305395,-0.8833139066480764,-1.1081791845903677,-1.3299807409799058,-1.5602464302282222,-1.8235431960839332,-2.013951489656766,-2.1415720390100637,null,-2.675984626404759,null,null,2.8697529874262364,null,2.455608645842415,2.2672338626352984,2.03694307543842,1.8239437367367606,1.5788415548939587,1.3717659093870664,1.1332148092293313,0.9146706490405981,0.6895287332511214,0.4743239719716959,0.25267634126612093,0.028085525508621412,-0.12340636714246099,null,-0.6396360759707302,-0.8817324175671597,-1.1160970602402374,-1.347268599258706,-1.5875651392957781,-1.8594454370785234,-2.0411136934891516,-2.1029363431783885,null,null,null,2.9992258902644533,null,2.5054690622897846,2.341197944129479,2.0986208122580132,1.8822081082495095,1.631625770179135,1.408189446876672,1.1631320802004592,0.9333329387971365,0.6997512607901725,0.47506319136759734,0.24421246501098637,0.012050398886180333,null,-0.3859618859064825,-0.695711435821754,-0.9402007718961314,-1.1805967691490782,-1.4233921760471637,-1.7043502133790611,-1.9427658411611195,-2.128564490834166,null,null,null,null,2.821573985481445,2.55712231358512,2.43961696230405,2.2022732758135715,1.988032163809437,1.7445942972654347,1.5061701857534204,1.277842462539569,1.0413356549105544,0.8087280858192766,0.5745549615626505,0.34204104040838584,0.10701862184582715,-0.09784192762635845,null,-0.6124026144736856,-0.8624022872407179,-1.1085565769166523,-1.3520151868405301,-1.6011342737084262,-1.8774516626245983,-2.06605728984249,-2.1283058613644092,null,null,null,2.9309598362080784,null,2.463281013823029,2.231962636032699,2.0134472271210555,1.771382742682837,1.5283346561124425,1.2879631527875228,1.057362881247104,0.824804034976026,0.5941430906317362,0.36166472409223066,0.12411712406561631,-0.09206075629838228,null,-0.5960033970047706,-0.8454103791494576,-1.0929685373383486,-1.3327626140680908,-1.5798297308643925,-1.86300957783276,-2.0553024229584445,-2.137817914514774,null,null,null,2.963746941915251,null,2.481134273137309,2.252889923955214,2.024561842285502,1.7763221270383323,1.527568271935609,1.285720192923458,1.0494306860967662,0.8104576990144283,0.5719330555398593,0.3307780854668431,0.08712762409566684,-0.12884142879686028,-0.34170977070938996,-0.6699793738263585,-0.9264124529411757,-1.1793021453803803,-1.4347995862977057,-1.7380111355820709,-1.973028281392091,-2.155991007628338,null,null,-3.0914467999102504,2.9942653584862917,2.576499001624328,2.4612773974424265,2.2070679648893345,1.9612875466190591,1.6877106013687995,1.4220036868532733,1.1530249225121965,0.8935681922429384,0.6269145172473407,0.3509891146527951,0.06203017088545076,-0.16248451593779503,-0.5057740452115593,-0.8256876236438297,-1.1320972008522818,-1.4446075091100632,-1.785860631141232,-2.0750910456351246,null,null,null,null,2.473806548496706,2.1814885687261585,1.8601214499139143,1.5147031599196032,1.1972545405956818,0.8818470776918275,0.5504076559179151,0.20960372983637493,-0.09810015938473358,null,-0.7295802545108248,-1.0251117407426076,-1.320326678584345,-1.627379894205613,-1.9308676375333904,-2.1528643497490902,null,-2.6929397980899688,3.1239650461515716,null,2.4973141407006496,2.3116827811947895,2.025358836153555,1.733234660132993,1.4479288307372074,1.172953621992087,0.8999175618762965,0.6248602077834257,0.3439551882222002,0.05717519189978391,-0.15792065612838221,-0.492777008419756,-0.8046120527296399,-1.079840993170078,-1.3355720210235948,-1.5935457427033848,-1.8839228613215202,-2.074268241729211,null,null,null,null,2.815680770638149,2.534015301933697,2.4099416751563947,2.1691274284689976,1.954842069976704,1.7261919168710294,1.500053422063635,1.2690883777695914,1.0469754856724065,0.8294609108104504,0.6064581032820199,0.3922582643624706,0.17686975839274127,-0.03375528364164363,null,null,-0.663241217421414,-0.8897473535130807,-1.1370381710448236,-1.389877168836598,-1.670404247292085,-1.9259413954190936,-2.121159574810904,null,null,null,3.0374781125668893,null,2.429929986646958,2.141067995571691,1.8485047932511123,1.5381145210790725,1.2393113928535302,0.9470251953896234,0.6377538718111777,0.3032073201187042,-0.03961211704786309,null,-0.7316363840334565,-1.0880107552202325,-1.4488753155697904,-1.8466569596229094,-2.1417785481042597,null,null,2.833771530599642,2.4638455100015806,2.123056792147774,1.7208407463060373,1.327657394255046,0.9408807239500282,0.5133226652254643,0.06771655360765844,null,-0.8350147164362252,-1.298743702501138,-1.7955499235991979,-2.083278110496394,null,3.099590937726651,2.458409435953291,2.051767630775579,1.5650619537907422,1.103583262957082,0.5940635951866068,0.058675559648599065,-0.4494084819691451,-1.0310168487141886,-1.5809005667726244,-2.1157349495184734,-2.68330790656715,3.0754200654530806,2.365007826562864,1.8526626293997546,1.297625754528541,0.7318510361937148,0.12304359613898645,-0.491345722010073,-1.1539371482181524,-1.831434992903692,-2.211277464348721,3.1249923687511565,2.3819208411767683,1.8190445311640235,1.1758280573372712,0.5092451120564447,-0.21322344983628633,-0.9667928876786632,-1.778952237073941,null,3.0940791217142136,2.1920804557507587,1.492830161892593,0.7447701023438233,-0.0460199540925075,-0.8717952970662316,-1.7789232012961418,null,null,2.005602077429291,1.2246610287086566,0.38456715620731813,-0.47233186294351487,-1.451135594890392,-2.180670472233517,3.0987118755607583,2.056196790730258,1.1771345123547095,0.22203469369543163,-0.75704167587646,-1.9731556829268377,null,2.182316274792554,1.2973477448948871,0.23062594532872122,-0.8217398466101323,-2.1179425383694377,null,1.8245124395436878,0.8141487886971676,-0.4049087137761738,-1.9872488672326638,null,1.9547398990283251,0.9314408446095553,-0.3742273194818232,-2.0533263450525823,null,1.8422199977156295,0.6269990533695488,-0.5187886906988174,-2.1614089073921146,null,1.5021782569188655,0.17391548269074178,null,null,2.0526617598143413,1.031239467587344,-0.4012055013468055,-2.180577236478004,null,1.4615082558711252,0.08543345972095885,null,null,2.0081347125818256,0.932770924683144,-0.4157509028111127,-2.183065467525781,null,1.584541517920635,0.3275561743906253,-0.835788480635254,-2.233821561648138,2.157964927472765,1.1680679039587913,-0.14363967242828946,-1.8827456172407064,null,1.9161846784679275,0.8337924522681556,-0.4693481724805581,-2.1733231195160467,null,1.5649679010358875,0.33194588010619336,-0.782862615970376,-2.224282016452439,2.1920967009103407,1.2488477845592425,-0.027170020915517887,null,null,2.036949759865182,1.0344215257142515,-0.32237065167244694,-2.02831696253985,null,1.8271221858707827,0.6396962735430132,-0.5009892609847684,-2.1549805904139383,null,1.6072359309397355,0.379014718526341,-0.650044090667365,-2.1702958653506492,null,1.4301437564217547,0.16988222623308358,null,-2.2353666459329427,2.192328679684628,1.286381454159211,0.021481990633549452,null,null,2.1296446180125312,1.1900290013992774,-0.09321604596122068,-1.462517273836179,null,2.0793459878315015,1.1150631763987486,-0.18041274035821028,-1.764605599382148,null,2.050750244058812,1.0762896729109463,-0.22218476820539554,-1.834687779288347,null,2.041245086061062,1.0426362715742699,-0.23443446489625364,-1.8372553543844277,null,2.0481967699834414,1.0696946288537361,-0.21426839211920218,-1.7908511149424253,null,2.0727558323583626,1.107324614221968,-0.15979509315660792,-1.664779439872703,null,2.1100764627334545,1.179487944782092,-0.065895727922344,-1.5066972938037564,null,2.174686007795748,1.2591377896323197,0.060677725379168386,-1.2980818227859503,-2.22542397990174,2.28219033754497,1.4098931954696372,0.23681954938685196,-0.8409275708723648,-2.14794071879826,null,1.59483336964921,0.45858483835577135,-0.593870919352731,-2.1301607387599764,null,1.8137204881748012,0.7619626557898597,-0.4038051289254389,-1.924681549620181,null,2.051621127628696,1.0975014462232078,-0.1289958832906185,-1.427466068072843,null,2.2219442732143753,1.3348830925570738,0.19243287835808953,-0.9312326196946796,-2.153192724785757,null,1.6612398561771262,0.5498075250777817,-0.4768361934525863,-2.0122436986202876,null,2.018753953056395,1.0644261785828872,-0.13463897071416067,-1.4167797045271597,null,2.2691918954954238,1.4168920201525195,0.31259684502673446,-0.7355034733431003,-2.1176751125833366,null,1.850115629231371,0.8928468123787804,-0.29017060101534525,-1.6795210574064199,null,2.207837452448792,1.3326653108039574,0.22804671844878363,-0.8297052147272806,-2.1116178151645055,null,1.8697130650302176,0.9316222282475544,-0.24173104662277248,-1.4983335322308025,null,2.2967124941760293,1.4742370721819862,0.414808315748329,-0.6148097856429829,-2.0256396201610842,null,2.0822092462922868,1.123594926734784,0.042744034264342194,-1.1213673812362588,-2.148909299080628,null,1.7789953608391644,0.8460094464797026,-0.2803350321827616,-1.5158034799631934,null,2.303318740850308,1.5149576884774536,0.48184586534051077,-0.5287468045699223,-1.8994605135277756,null,2.1820597989303074,1.2986037412308207,0.2529524930989521,-0.7784658036132216,-2.0743891309539015,null,2.065531723363221,1.1236572025463145,0.0675117802421832,-1.043410290923967,-2.1153999316224166,null,1.9461401887216816,1.0258503153055614,-0.0436114436313502,-1.2016638821961751,-2.1515702377803585,null,1.8425212323695472,0.9470191901959913,-0.14061804980492526,-1.2791492991389357,-2.184908909909131,null,1.7874646954051974,0.9124920213736266,-0.1715124908404226,-1.2949961177628375,-2.195200886472429,null,1.7916228941571124,0.9165987754784412,-0.15286657081513283,-1.2771541425070805,-2.174746140330896,null,1.8382253308975505,0.9609860640364518,-0.08746511902400118,-1.1890758493641644,-2.1390056039806638,null,1.982504423439736,1.0532836893305408,0.06559890815484672,-0.9349560642515697,-2.030368365971918,null,2.2189926471947246,1.415267181674305,0.53072586572663,-0.3741078425998186,-1.3286169083011832,-2.118423870367092,-3.132577834448751,2.2408073733320495,1.5229608079305579,0.75206104286414,-0.02866010927927188,-0.8064783578463636,-1.6160075480952119,-2.1178373053750343,null,2.3377171320722714,1.917381659620985,1.335143542828682,0.7802833516072714,0.22094812815983214,null,-0.7757959498942313,-1.2255969834692844,-1.655927334323645,-2.0192554067296675,null,null,null,2.9786750905761443,null,null,2.5075081519230182,2.4859021141675455,2.463117498328479,2.4415448507680866,2.4514474862443594,2.441888402580859,2.438502553606229,2.4347958667156178,2.43376790893979,2.4323704921922342,2.430156328804399,2.42806611887847,2.424926992890546,2.426465794603182,2.424352894103687,2.436364111994681,2.4326482074713653,2.4326357377023777,2.4306198104088748,2.427330061211812,2.429760266165334,2.419013090736963,2.418790618661621,2.409123744129235,2.414619452772578,2.4162659367061345,2.4084620717607645,2.4030670100429337,2.3751162983183876,2.3795713616419314,2.3729983227533875,2.3636276042502193,2.3637434970053692,2.35777572176414,2.3428155923788685,2.3370367907463563,2.3282412468901565,2.3129474507644834,2.3107434784898118,2.309611174718204,2.294371983047595,2.290642869769257,2.270744507159853,2.2669069132338406,2.271216268453737,2.2538950754520104,null,2.2052078439900895,2.19893791363513,2.1714681283713735,2.142290077803379,2.0992546174634388,2.0653297906663286,2.008977442064384,1.970883605098265,1.9345816861743061,1.8495341151616935,1.7416658244225376,1.6215905183050339,1.4926880282575745,1.359224901224823,1.1915921625507724,1.0230733928316778,0.8477333392836466,0.6566798260570108,0.4824623908810927,0.3043517344401426,0.12124433363193642,-0.05921037494256437,-0.17055606700886888,-0.3737474885213386,-0.63718929107415,-0.8533107109070628,-1.059969875428853,-1.2624981496228362,-1.4783749635102417,-1.7306151237440426,-1.9396544888376306,-2.0940036065428096,null,null,null,null,2.936000297505381,2.5890796026493144,2.442888796943233,2.187020284831479,1.957474590054838,1.6965737575505904,1.4355397551030107,1.1682291887704344,0.9130437118484797,0.6516998832097726,0.3931383899970543,0.12101356179913382,-0.12119058371021148,-0.40255516949477466,-0.7362055899757385,-1.0306889944465074,-1.3259142878197712,-1.6459405891399652,-1.9556445309690313,-2.1519902974445775,null,null,3.0828485959951926,null,2.3788414898182983,2.0734229474418795,1.7327106980867424,1.3970520733319507,1.0749264292275686,0.7522282916009553,0.3980073462286663,0.03302004758993978,null,-0.7091766985681962,-1.0875389161634985,-1.4712986067496296,-1.8759209984704723,-2.119936201693983,null,null,null,2.323750182905909,1.9357574242687128,1.5167718780123638,1.1166907012109288,0.6905551712427048,0.23001408032774417,null,-0.6878082813032536,-1.1863584636436546,-1.7007456609246985,-2.107420048225788,null,3.1026601033525445,2.458335095317296,2.0204538162002277,1.510473098320377,1.0274149997197028,0.48388373370049187,-0.07384624110546124,-0.6124859444941702,-1.213428060647849,-1.823260521490793,-2.159540205109944,null,null,2.0522786431406184,1.4755861413659832,0.8913817605924459,0.2680319656044295,-0.371242262346006,-1.055204177878001,-1.7793629708683711,-2.2126653318942227,3.1232067068075553,2.320351589352563,1.7007796123737262,1.0277260295672097,0.3121843924101552,-0.43500277185104264,-1.2496647434362063,-2.0677017659445216,null,2.2285910523109425,1.8343994066256026,1.0783588814816942,0.2872704010616114,-0.515668295498517,-1.4202392591880324,-2.128066462929418,3.1376083937778785,2.2045985025972326,1.423603593261594,0.6438109814492221,-0.24817952883176972,-1.2119432374616157,-2.119621501371607,null,2.1448087293616194,1.2946847683834335,0.34515264177353505,-0.6146808390579145,-1.9168047755951165,null,2.1835948963884757,1.3012856387834748,0.2289343454919274,-0.8488623194674303,-2.129046483219135,null,1.7136482071930845,0.5853926768865618,-0.43168186390303026,-2.139129937555233,null,1.7509402770957976,0.5425381945000671,-0.5419759171185916,-2.160135521388195,null,1.5438536303371122,0.2622571304700741,-0.8557975772764593,null,2.1260129318316396,1.2248471327140893,-0.24280591168736199,-2.0489225733613363,null,1.6639746898409258,0.25701141853160575,-0.7753918262641968,null,2.0652826812054688,1.1246297195602455,-0.34114978168276483,-2.13902476457797,null,1.6242597650609936,0.29312414632157546,-0.7394901873384226,-2.221439256712858,2.1761962975452014,1.2679486441733194,-0.031644619830060554,-1.2498489850769292,null,2.1470123919190316,1.2148559214688417,0.01897127679153399,-1.1559055172180492,-2.2181450261202604,null,1.5863759205080203,0.5759200620018997,-0.4286178206410537,-1.6408507986509782,null,1.8219308184536136,1.7360981127139077,0.8746574094891483,-0.000977765298438451,-0.8710293187644333,-1.7657647759311808,null,null,2.1914740104636716,1.5564443383851063,0.9502812816586486,0.34284945445812526,null,-0.732168846806675,-1.2213778437678835,-1.675615430179595,-2.0419375285267467,null,null,null,2.981767864823288,null,null,2.5355924142820214,2.528734669472471,2.5279346404445358,2.5607067600374007,2.566000822838674,2.571652263010809,2.558367540356665,2.563516616187468,2.5645992901609644,2.566690258034602,2.5690616210925796,2.5709043838652037,2.566235115937148,2.561342243982152,2.561069354676147,2.5601961682091483,2.564032034409178,2.562892089561963,2.558884057692062,2.5573661141926154,2.555743273828112,2.55550067576816,2.5552379063355577,2.556561862091639,2.5571960714441975,2.5568622690999048,2.5567007430918998,2.556497585032317,2.5559115692418755,2.5597740164223914,2.559209636610735,2.5592935216339163,2.559604792323964,2.558576151582905,2.5593107724202797,2.5578467807303085,2.5588959448031097,2.559341355875716,2.5598890706610553,null,2.563287971025198,2.5619663201342933,2.56220140474218,2.560139331432638,2.5603346977610464,2.55980483812026,2.5599197616013885,2.559772193176962,2.560888420198421,2.55487192808061,2.555458086310286,null,2.5560181855921345,null,2.5560181855921345,null,2.553508767492438,2.5518476981852656,2.551803589375485,2.551536304282761,2.55234064796868,2.552394748362379,2.552173023656113,2.546008206638808,2.547813963806385,null,2.546099540021282,2.54627878427501,2.5462943552744717,2.5460600934402295,2.5467161537823855,2.547035876997683,null,2.5473929151440373,2.547264070657384,2.548441524744456,2.545881861469839,2.5473892562168174,2.550171148684091,2.546070487736367,2.5461892015451033,2.547024614580378,2.5467346736332637,2.5467014633310847,2.5468468833279045,2.5471803662294517,2.546621814973968,2.5449057052234303,null,2.545303001226128,2.5459057821374564,2.5455839886875533,2.545696352933007,2.545395843290116,2.547716669731248,2.5474397095367323,2.5473280810338683,2.5475953999000795,2.5486733323917017,2.549246139713268,2.5508606124455984,2.5497480645386714,null,2.5428918091795683,2.546015756888427,2.547196972786857,2.5471032469000496,2.546653020618816,2.546314233545937,2.5395995180651942,2.5379821012308383,2.5380367990721626,2.536493320193307,2.541463192210289,2.5381895870702578,2.537251479178726,2.5355070708853846,2.541051344866752,2.53715746310922,2.5405679910116037,2.5427234234186664,2.538817259434741,2.5405219198949576,2.544002062204787,2.543235729018278,2.5440415041621236,2.5416848222970976,2.546789543439067,2.5462118404686644,2.5431138099447788,2.5419638101015973,2.5401734977473387,2.539723535344872,2.539760794970557,2.540272851416599,2.541217159135628,2.5393242337871422,2.539970936277429,2.537202034941921,2.5381420561018757,2.538454883955787,2.5403025156426873,2.5449377883335815,2.542218838195901,2.5438593065572994,2.5395564476549644,2.5408472355938745,2.5436973622058696,2.544014711585186,2.546519276396552,2.5486523432654833,2.5484368583486527,2.546752139553724,2.5466734151229864,2.5481866497278185,2.5478368959239424,2.5491168972547267,2.5434527949676586,2.5424080398445397,2.542870556077453,2.537979139515886,2.535829696300363,2.5316829006465396,2.5420853139095,2.5253524115510224,2.5227762138442493,2.523369782243726,2.5214940665346406,2.51508067640594,2.5090405457134155,2.4835977605898663,2.4580294442044686,2.409621756463794,2.3343391313407875,2.2509784685829524,2.1897255682789907,2.123323063455337,2.052118862675478,1.9815896265579809,1.9408626038610381,1.8793807473497381,1.784632150563266,1.6849135700847249,1.5800991475954071,1.4639780244110367,1.3386255546286887,1.1943569297427592,1.0407226859921874,0.8873676581177092,0.7123788748930038,0.5499432338825513,0.3755749839454668,0.1841434682413729,-0.008071318483275226,-0.14419785128990528,-0.3140412860866934,-0.5846524938929704,-0.7975557505937735,-1.0113024903848977,-1.221463150148539,-1.4374939551978227,-1.6876698179703018,-1.8929670672492176,-2.0658357645291576,-2.167043474571984,null,null,null,2.995047048014305,2.6185945373217407,2.501113943633909,2.253544907865569,2.003640458845222,1.7588340182264162,1.4992836066827908,1.2599775181176673,1.0132160803777819,0.7597421061750276,0.49333778527395566,0.2264680462814797,-0.043003587345183024,null,-0.5937049802281457,-0.8831592458328302,-1.1721584469925117,-1.473403491854482,-1.8045572760523438,-2.0798097287318003,null,null,null,2.7840385931124847,2.5067766252494077,2.2152262584558264,1.8814480751073772,1.5357793202892107,1.2070246041040562,0.8775185027776196,0.5321860424288359,0.1694990415051418,-0.15090335388215162,-0.5715454809033635,-0.9475417997310237,-1.330854502544631,-1.7523175682507326,-2.119146350885177,null,null,2.811987222892372,2.4277074414143307,2.0398935624014074,1.609930641175584,1.2129078745393356,0.8032337922025409,0.35205966685865797,-0.11230651651941019,-0.5575643971936873,-1.0439078214777193,-1.5255711823237001,-2.0301650757453156,null,null,null,2.1773194472932538,1.6790001623168405,1.202863495913033,0.6979365444851664,0.15971254147401762,-0.34431417838874084,-0.9311071208230334,-1.513764965061152,-2.0767882359943055,null,3.05867134692323,2.338667896639669,1.8120681785464052,1.245836919087898,0.6588644462948534,0.04790270878157919,-0.5563610126636613,-1.247022978280029,-1.925393185391619,null,3.0896409875631474,2.2509770834736633,1.6298631829602093,0.9771555131616112,0.28342648486402244,-0.43597364339626843,-1.213709524457153,-2.023910038411125,null,null,1.924817734438971,1.1797514377026639,0.41844220627722645,-0.36863199603385727,-1.2369232035131965,-2.0951189503520373,null,2.3001711298692165,1.5891640451565854,0.8150412087424197,-0.05959603507896906,-1.0004641628560427,-2.028626179480171,null,2.210216496009485,1.4088402043423554,0.5172106584825685,-0.41529930119746306,-1.7503490477264065,null,2.212111653936449,1.367454889333039,0.3959332229568257,null,-2.133511430324532,null,1.753848773122793,0.7228695537862311,null,-2.1235726283747294,null,1.7681964662390215,0.6047002699401228,null,-2.1722029061726738,null,1.555409342358585,0.4011579096541478,null,-2.237362899343015,2.110933547764474,1.2069519055707967,-0.13479585744058667,null,null,1.6493876150119742,0.32170590845924973,null,null,2.0795923813404973,1.1513189020369674,-0.26815648296770567,-2.0711597205218606,null,1.7180794016735494,0.4126485154823674,null,-2.1724448380268178,2.228799134176665,1.33681450086515,0.07023326103759407,null,null,2.0383872829543006,1.0836849916816471,-0.18423187359113338,null,null,1.7960326853268878,0.5725860382137895,null,-2.1651922839564426,null,1.5172422395891954,0.32510635690073,null,-2.206799817669674,2.1998390813840065,1.2932892453519258,0.09567783768002165,null,null,2.0647300439949756,1.133960331070945,-0.1015218565849436,null,null,1.9492931643787352,0.8867328565706152,-0.26548516544278855,-2.060380956097946,null,1.8084295531980026,0.6127794802566916,-0.35870358943063774,-2.1464403716431493,null,1.6834806204947552,0.5163930649393593,null,-2.14066553338131,null,1.5891430615010307,0.4562006212583563,null,-2.1413161397181324,null,1.5345986008769372,0.41221844821613385,null,-2.142250282834496,-0.28753365919171964,1.5094392086282913,0.38825984824995613,null,-2.13890815873712,null,1.5180905122190955,0.39087610705932996,null,-2.132649722826385,null,1.5601139062719387,0.42576996844756154,null,-2.126734218642083,null,1.6379068648752064,0.4980289975911707,-0.44894311471307946,-2.127599504464932,null,1.7639465710655513,0.6482024836915697,-0.39402403910751727,-1.9573436693310726,null,2.0414690654143435,1.0797317023999489,-0.04940343230970349,-1.2795677042673383,-2.1986648441254166,null,1.6806260829017352,0.7864771884344697,-0.25977275289018364,-1.3584045835234524,-2.1765676263408915,null,1.9325749605501923,1.0720096173258187,0.19756078295464527,-0.6690227446068047,-1.6630594984345701,-2.2464342337297545,null,2.132775459570526,1.4485380792128955,0.7466017970015334,0.05539363159942441,-0.5810416386305717,-1.2405641626403843,-1.8492294783197247,-2.1581885249531982,null,null,2.363125040401928,1.9946850283514546,1.6202740627021028,1.3049907436226897,1.0264282671327287,0.790097642243588,0.586861382242461,0.4355395542865923,0.32124546210568367,0.2369306441633303,0.21287899136937039,0.22113972079131078,0.23309318312710128,0.23132238469272146,0.22891596674312711,0.22662262070689798,0.22968079072197073,0.2287031147428795,0.2348162313857826,0.23056516390316575,0.23207174835623595,0.22679042771033597,0.23149370330240843,0.23355150712694703,0.23151399426810618,0.22936697122275687,0.2297934344387741,0.22810878383329364,0.22717438836999415,0.22789727600525067,0.22765451755776642,0.2246266171089645,0.2269372835505229,0.22762008111698137,0.2285278025740696,0.22861740633867064,0.22913059759257084,0.22645732203463742,0.22710139913740549,0.22695169303731222,0.22796738175679335,0.22786402689989502,0.22761115607816976,0.22324478164220207,0.22342898077798995,0.22301187177793425,0.22278527995357814,0.22220725822199022,0.2220665229839819,0.222599798452788,0.22542608220372035,0.23180016438129494,0.2303018339386618,0.2299144647656172,0.22768613876184973,0.22854591073838706,0.22973025582165563,0.2295463738206381,0.22924672170541865,0.22942427879424018,0.2290225969877454,0.23249927628828587,0.2272725435701737,0.22794366059006288,0.22789451468908822,0.2275497440177918,0.22208474864700953,0.22706660891092723,null,null,0.22605746609544944,0.22603658873534951,0.22626193768395947,0.22609982602377304,0.22612815775730996,0.22594352143587737,0.2263666656584155,0.22618257652262586,0.2282772739892458,0.22835817092539612,0.22731519451622337,0.22857417301725244,0.224462304292032,0.22458385298864816,0.2268953827677488,0.22448876792175776,0.22483797440506176,0.22412610010412734,null,null,null,null,null,null,null,0.22354749468234986,0.22343695276510447,null,null]');
    video.controls = true;
    video.currentTime = 0;


    let lastAngle = angles[0];
    let lastDelta = 0;
    for (let i = 1; i < angles.length; i++) {
      let angle = angles[i];
      if (angle == null || angle == undefined) {
        angle = lastAngle + lastDelta;
      }
      
      
      let predictedAngle = lastAngle + lastDelta;
      let diff = getDeltaAngle(angle, predictedAngle);
      if (Math.abs(diff) > Math.PI / 2) {
        diff = 0;
      }
      let delta = lastDelta - diff;
      deltaAngles[i] = delta;
      

      lastAngle = angle;
      lastDelta = delta;
    }


    let sign = 0;
    for (let d of deltaAngles) if (d) sign += Math.sign(d);
    sign = Math.sign(sign);
    deltaAngles = deltaAngles.map(e=>e*sign);

    deltaAngles = denoiseArray(deltaAngles, 15);

    
    let cum = [];
    let lastcum = 0;
    for (let i = 1; i < 100; i++) {
      let da = deltaAngles[i];
      let c = lastcum + da;
      cum.push(c);
      
      lastcum = c;
    }
    

    let b = true;
    if (b) {
      let canvas = document.getElementById("curve-canvas");
      canvas.width = 1920;
      canvas.height = 1080;
      let ctx = canvas.getContext("2d");
      renderGraph(ctx, [deltaAngles], [], {name: "rpm"}, {name: "angle"});
    }
    else
      calculatePower();

    document.getElementById("skim-button").onclick = () => {
    
      setInterval(() => {
        displayctx.lineWidth = 20;
        let frame = Math.floor(mouse.x);
        console.log(frame);
        
        extractFrame(frame);
        
      }, 100);
    };
  })();
}
  */

function calculatePower() {
  runs = [[], []];

  let maxda = 0;
  let maxdas = [];
  let ends = [];

  let runIndex = 0;
  for (let i = 1; i < deltaAngles.length; i++) {
    let da = deltaAngles[i];
    if (da > maxda) {
      maxda = da;
      maxdas[runIndex] = i;
    }
    if (da < 0.02 && maxdas[runIndex] > 0.5) {
      runs.push([], []);
      ends.push(i);
    }
  }
  runIndex = 0;




  let lastda = deltaAngles[0];

  for (let i = 1; i < deltaAngles.length; i++) {
    let da = deltaAngles[i];
    if (i > maxdas[runIndex]) {
      i = ends[runIndex];
    }
    
    if (i >= ends[runIndex]) {
      runIndex++;
    }

    let aa = (da - lastda) * settings.fps;

    let torque = aa * settings.inertia / settings.gear;
    let rpm = da * settings.fps / Math.PI / 2 * 60 * settings.gear;

    lastda = da;

    if (aa < 0) continue;
    runs[runIndex * 2].push(new Vec(rpm, torque));
    runs[runIndex * 2 + 1].push(new Vec(rpm, torque * rpm / 9.5488 / 745.7));

    
  }




  let lines = [];
  for (let i = 0; i < runs.length; i++) {
    lines.push({c: i % 2 == 0 ? new Vec(255, 0, 0) : new Vec(255, 255, 0)});
  }
  lines[0].name = "Torque (nm)";
  lines[1].name = "Power (hp)";

  let canvas = document.getElementById("curve-canvas");
  canvas.width = 1920;
  canvas.height = 1080;
  let ctx = canvas.getContext("2d");
  
  renderGraph(ctx, [runs[0], runs[1]].map(run=>run.sort((a,b)=>a.x-b.x)), lines, {name: "rpm"}, {name: "torque/power"});
}


//https://gist.github.com/yomotsu/165ba9ee0dc991cb6db5
var getDeltaAngle = function () {
  var TAU = 2 * Math.PI;
  var mod = function (a, n) { return ( a % n + n ) % n; } // modulo
  var equivalent = function (a) { return mod(a + Math.PI, TAU) - Math.PI } // [-π, +π]
  return function (current, target) {
    return equivalent(target - current);
  }
}();

function denoiseArray(arr, windowSize = 5) {
  const result = [];
  const half = Math.floor(windowSize / 2);
  for (let i = 0; i < arr.length; i++) {
    let sum = 0, count = 0;
    for (let j = -half; j <= half; j++) {
      const idx = i + j;
      if (idx >= 0 && idx < arr.length && arr[idx] != null) {
        sum += arr[idx];
        count++;
      }
    }
    result[i] = count > 0 ? sum / count : arr[i];
  }
  return result;
}